1. MainActivity
Главная активити приложения.
Управляет запуском/остановкой отслеживания усталости (isTracking), отображением уведомлений, работой камеры, отправкой видеопотока на сервер.
Использует CameraHelper для локального превью и FaceDetectionProcessor/FatigueAnalyzer для ML-детекции.
Отправляет кадры на сервер через VideoStreamUtils.
Показывает список уведомлений, воспроизводит звук/вибрацию, отправляет события на сервер.

2. SettingsActivity
Экран настроек приложения.
Позволяет выбрать звук уведомления, уровень громкости, включить/выключить вибрацию, тёмную тему, настроить ML-детекцию.
Сохраняет настройки через DataUtils.
Есть туториал по использованию приложения.

3. EyeSettingsActivity
Экран для калибровки глаз (открытый/закрытый) и выбора стороны камеры.
Позволяет вручную откалибровать значения вероятности открытого/закрытого глаза.
Использует CameraHelper и FaceDetectionProcessor для отображения превью и анализа глаз.

4. FaceDetectionProcessor
Класс для ML Kit-детекции лиц и глаз на изображениях/кадрах.
Позволяет определить, открыты ли глаза, и вычислить наклон головы.
Используется для локальной детекции усталости (моргание, наклон).

5. FatigueAnalyzer
Анализатор усталости для CameraX (реализует ImageAnalysis.Analyzer).
Детектирует долгие моргания и наклон головы по кадрам с камеры.
Вызывает callback при обнаружении усталости.

6. CameraHelper
Управляет работой камеры через Camera2 API для TextureView (превью).
Запускает/останавливает камеру, получает кадры, передаёт их в FaceDetectionProcessor для анализа и в OverlayView для визуализации.
Используется для отображения локального превью и калибровки.

7. OverlayView
Кастомный View для рисования поверх превью камеры (например, рамки лица, индикаторы глаз).
Обновляется из CameraHelper или других классов.

8. VideoStreamUtils
Управляет WebSocket-соединением с сервером.
Отправляет JPEG-кадры на сервер (например, для удалённой обработки).
Следит за состоянием соединения, реализует reconnect, обработку ошибок.

9. NotificationUtils
Управляет системными уведомлениями (foreground notification).
Показывает уведомление с кнопками "Остановить" и "Закрыть".
Используется для отображения статуса отслеживания в шторке.

10. NotificationActionReceiver
BroadcastReceiver для обработки нажатий на кнопки в уведомлении.
Реагирует на "Остановить" (переключает отслеживание) и "Закрыть" (закрывает приложение).

11. DataUtils
Утилитный класс для хранения и получения настроек пользователя (SharedPreferences).
Сохраняет калибровку глаз, настройки вибрации, громкости, темы, ML-детекции и т.д.

12. RequestUtils
Класс для отправки HTTP-запросов на сервер (например, логирование, отправка уведомлений).
Работает с любым Context (Activity, Service).

13. SettingsActivity, LoginActivity, IntroActivity, AgreementSlideFragment
SettingsActivity — настройки приложения.
LoginActivity — экран входа.
IntroActivity — экран приветствия/инструкции.
AgreementSlideFragment — слайд с пользовательским соглашением.
Взаимодействие:

MainActivity управляет всем процессом, использует остальные классы для детекции, отправки данных, отображения UI и работы с сервером.
Все настройки и калибровки хранятся через DataUtils.
Видео отправляется на сервер через VideoStreamUtils.
Уведомления и их действия реализованы через NotificationUtils и NotificationActionReceiver.